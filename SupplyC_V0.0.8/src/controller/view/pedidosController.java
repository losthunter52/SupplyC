package controller.view;

import java.net.URL;
import java.time.ZoneId;
import java.util.Date;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import controller.facade.PedidosFacade;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import model.ItemPedidoJoinItem;

@SuppressWarnings("rawtypes")
public class pedidosController implements Initializable {
	@FXML
	private TableView tablePedidos;
	@FXML
	private TableColumn columnCategoria;
	@FXML
	private TableColumn columnDescricao;
	@FXML
	private TableColumn columnQuantidade;
	@FXML
	private DatePicker dataPicker;
	@FXML
	private ComboBox<String> boxPedidos;
	@FXML
	private Button btnSalvar;
	@FXML
	private Label labelPedido;
	@FXML
	private Label labelFim1;
	@FXML
	private Label labelFim2;
	@FXML
	private Button btnZerar;
	@FXML
	private TextField txtQuantidade;
	@FXML
	private TextField txtProduto;
	@FXML
	private TextField txtCategoria;
	@FXML
	private Label labelStatus;

	private ObservableList<String> dataPedidos = FXCollections.observableArrayList();
	private PedidosFacade pedidosFacade = new PedidosFacade();
	private String[] pedidoSelecionado = new String[2];
	private Boolean alterar = true;
	private Boolean finalizado = false;
	java.sql.Date sqlDate;
	float quantidade = -1;

	@SuppressWarnings("unchecked")
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		labelPedido.setText("");
		labelStatus.setText("");
		clear();
		columnCategoria.setCellValueFactory(new PropertyValueFactory<ItemPedidoJoinItem, String>("categoria"));
		columnDescricao.setCellValueFactory(new PropertyValueFactory<ItemPedidoJoinItem, String>("descricao"));
		columnQuantidade.setCellValueFactory(new PropertyValueFactory<ItemPedidoJoinItem, Float>("quantidade"));
	}

	// Event Listener on TreeTableView[#tablePedidos].onKeyPressed
	@FXML
	public void tablePedidosKeyPressed(KeyEvent event) {
		// TODO Autogenerated
		if (event.getCode() == KeyCode.ENTER) {
			if (tablePedidos.getSelectionModel().getSelectedIndex() >= 0) {
				alterar = true;
				ItemPedidoJoinItem aux = pedidosFacade
						.selecionarItemPedidoPorIndice(tablePedidos.getSelectionModel().getSelectedIndex());
				txtProduto.setText(aux.getDescricao());
				txtCategoria.setText(aux.getCategoria());
				txtQuantidade.setText(String.valueOf(aux.getQuantidade()));
				if (!finalizado) {
					txtQuantidade.setEditable(true);
				}
			}
		}
	}

	// Event Listener on TreeTableView[#tablePedidos].onMouseClicked
	@FXML
	public void tablePedidosClicked(MouseEvent event) {
		// TODO Autogenerated
		if (tablePedidos.getSelectionModel().getSelectedIndex() >= 0) {
			alterar = true;
			ItemPedidoJoinItem aux = pedidosFacade
					.selecionarItemPedidoPorIndice(tablePedidos.getSelectionModel().getSelectedIndex());
			txtProduto.setText(aux.getDescricao());
			txtCategoria.setText(aux.getCategoria());
			txtQuantidade.setText(String.valueOf(aux.getQuantidade()));
			if (!finalizado) {
				txtQuantidade.setEditable(true);
			}
		}
	}

	// Event Listener on DatePicker[#dataPicker].onAction
	@FXML
	public void dataPickerClicked(ActionEvent event) {
		// TODO Autogenerated
		java.util.Date date = Date.from(dataPicker.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
		sqlDate = new java.sql.Date(date.getTime());
		dataPedidos.clear();
		dataPedidos = pedidosFacade.consultarPedidosPorData(sqlDate);
		boxPedidos.setDisable(false);
		boxPedidos.setItems(dataPedidos);

	}

	public void dataPickerKeyPressed(KeyEvent event) {
		// TODO Autogenerated
		if (event.getCode() == KeyCode.ENTER) {
			java.util.Date date = Date.from(dataPicker.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
			java.sql.Date sqlDate = new java.sql.Date(date.getTime());
			dataPedidos.clear();
			dataPedidos = pedidosFacade.consultarPedidosPorData(sqlDate);
			boxPedidos.setDisable(false);
			boxPedidos.setItems(dataPedidos);
		}

	}

	public void clear() {
		labelStatus.setVisible(true);
		labelPedido.setVisible(true);
		txtQuantidade.setEditable(false);
		txtQuantidade.setText("");
		txtProduto.setText("");
		quantidade = -1;
		alterar = false;
		finalizado = false;
		txtCategoria.setText("");
		labelFim1.setVisible(false);
		labelFim2.setVisible(false);
	}

	// Event Listener on ComboBox[#boxPedidos].onAction
	@SuppressWarnings("unchecked")
	@FXML
	public void boxPedidosClicked(ActionEvent event) {
		// TODO Autogenerated
		pedidoSelecionado = boxPedidos.getValue().split(" - ");
		clear();
		labelStatus.setText(pedidoSelecionado[1]);
		labelPedido.setText("Pedido #" + pedidoSelecionado[0]);
		tablePedidos.setItems(pedidosFacade.selecionaPedido(Integer.valueOf(pedidoSelecionado[0])));
		labelStatus.setText(pedidoSelecionado[1]);
		if (pedidoSelecionado[1].contains("finalizado")) {
			labelFim1.setVisible(true);
			labelFim2.setVisible(true);
			txtQuantidade.setEditable(false);
			finalizado = true;
		}

	}

	public void getQuantidade() {
		try {
			quantidade = Float.valueOf(txtQuantidade.getText());
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Invorme um valor inteiro ou decimal separado por ponto");
		}
	}

	// Event Listener on Button[#btnSalvar].onAction
	@FXML
	public void btnSalvarClicked(ActionEvent event) {
		// TODO Autogenerated

		if (!finalizado) {
			if (alterar) {
				getQuantidade();
				if (quantidade > 0) {
					pedidosFacade.salvarSelecionado(tablePedidos.getSelectionModel().getSelectedIndex(), quantidade);
					clear();
					boxPedidosClicked(new ActionEvent());
				}
			}
		}
	}

	// Event Listener on Button[#btnSalvar].onKeyPressed
	@FXML
	public void btnSalvarKeyPressed(KeyEvent event) {
		// TODO Autogenerated
		if (event.getCode() == KeyCode.ENTER) {
			if (!finalizado) {
				if (alterar) {
					getQuantidade();
					if (quantidade > 0) {
						pedidosFacade.salvarSelecionado(tablePedidos.getSelectionModel().getSelectedIndex(),
								quantidade);
						clear();
						boxPedidosClicked(new ActionEvent());
					}
				}
			}
		}
	}

	// Event Listener on Button[#btnZerar].onAction
	@FXML
	public void btnZerarClicked(ActionEvent event) {
		// TODO Autogenerated
		if (!finalizado) {
			if (JOptionPane.showConfirmDialog(null, "Zerar o pedido?", "WARNING",
					JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
				pedidosFacade.zerar();
				clear();
				alterar = false;
				boxPedidosClicked(new ActionEvent());
			}
		}
	}

	// Event Listener on TextField[#txtQuantidade].onKeyPressed
	@FXML
	public void txtQuantidadeKeyPressed(KeyEvent event) {
		// TODO Autogenerated
		if (event.getCode() == KeyCode.ENTER) {
			btnSalvar.requestFocus();
		}
	}
}
